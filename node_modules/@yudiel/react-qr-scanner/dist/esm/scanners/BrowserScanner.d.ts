import { DecodeContinuouslyCallback, BinaryBitmap, Reader, Result } from '@zxing/library';
import { IBrowserScannerOptions, IScannerControl } from '../types';
export declare class BrowserScanner {
    protected readonly reader: Reader;
    readonly options: IBrowserScannerOptions;
    private static streamTracker;
    constructor(reader: Reader, options: IBrowserScannerOptions);
    decodeBitmap(binaryBitmap: BinaryBitmap): Result;
    decodeFromCanvas(canvas: HTMLCanvasElement): Result;
    decodeFromConstraints(constraints: MediaStreamConstraints, previewElem: string | HTMLVideoElement | undefined, callbackFn: DecodeContinuouslyCallback): Promise<IScannerControl>;
    decodeFromStream(stream: MediaStream, preview: string | HTMLVideoElement | undefined, callbackFn: DecodeContinuouslyCallback): Promise<IScannerControl>;
    decodeFromVideoDevice(deviceId: string | undefined, previewElem: string | HTMLVideoElement | undefined, callbackFn: DecodeContinuouslyCallback): Promise<IScannerControl>;
    static cleanVideoSource(videoElement: HTMLVideoElement): void;
    static releaseAllStreams(): void;
    static listVideoInputDevices(requestPermission?: boolean): Promise<MediaDeviceInfo[]>;
    private static addVideoSource;
    private static mediaStreamSetTorch;
    private static mediaStreamIsTorchCompatible;
    private static mediaStreamIsTorchCompatibleTrack;
    private static isVideoPlaying;
    private static getMediaElement;
    private static createVideoElement;
    private static prepareVideoElement;
    private static createBinaryBitmapFromCanvas;
    private static drawImageOnCanvas;
    private static getMediaElementDimensions;
    private static createCaptureCanvas;
    private static tryPlayVideo;
    private static playVideoOnLoadAsync;
    private static attachStreamToVideo;
    private scan;
    private getUserMedia;
    private static checkCallbackFnOrThrow;
    private static disposeMediaStream;
}
