import React, { CSSProperties, RefObject } from 'react';
import { Result, DecodeHintType } from '@zxing/library';

type OnResult = (result: Result) => void;

type OnError = (error: Error) => void;

interface IScannerOptions {
    deviceId?: string;
    hints?: Map<DecodeHintType, any>;
    constraints?: MediaTrackConstraints;
    delayBetweenScanSuccess?: number;
    delayBetweenScanAttempts?: number;
    tryPlayVideoTimeout?: number;
}

interface IScannerComponents {
    tracker?: boolean;
    audio?: boolean;
    torch?: boolean;
    count?: boolean;
    onOff?: boolean;
}

interface IScannerStyles {
    container?: CSSProperties;
    video?: CSSProperties;
    finderBorder?: number;
}

interface IScannerProps {
    onResult: (text: string, result: Result) => void;
    onError?: (error: Error) => void;
    enabled?: boolean;
    styles?: IScannerStyles;
    options?: IScannerOptions;
    components?: IScannerComponents;
}
declare const Scanner: (props: IScannerProps) => React.JSX.Element;

declare function useDeviceList(): MediaDeviceInfo[];

interface IUseContinuousScannerProps {
    onResult: OnResult;
    onError: OnError;
    options: IScannerOptions;
    audio: boolean;
}
interface IUseContinuousScannerReturn {
    ref: RefObject<HTMLVideoElement>;
    startScanning: () => void;
    stopScanning: () => void;
    loading: boolean;
    scanning: boolean;
    switchTorch?: (value: boolean) => void;
    getSettings?: () => MediaTrackSettings | undefined;
}
declare function useContinuousScanner(props: IUseContinuousScannerProps): IUseContinuousScannerReturn;

export { type IScannerProps, Scanner, useContinuousScanner, useDeviceList };
